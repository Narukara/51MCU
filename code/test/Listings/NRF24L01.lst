C51 COMPILER V9.60.0.0   NRF24L01                                                          08/08/2020 18:31:22 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE NRF24L01
OBJECT MODULE PLACED IN .\Objects\NRF24L01.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C51\BIN\C51.EXE ..\hc\NRF24L01.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\h) DEBUG 
                    -OBJECTEXTEND PRINT(.\Listings\NRF24L01.lst) OBJECT(.\Objects\NRF24L01.obj)

line level    source

   1          #include "NRF24L01.h"
   2          
   3          #include <REG51.H>
   4          
   5          #include "time.h"
   6          
   7          /*******************************
   8           * Author: Narukara
   9           * Last modified date: 2020/8/8
  10           *******************************/
  11          
  12          sbit CE = P1 ^ 0;    // RX or TX
  13          sbit SCLK = P1 ^ 1;  // SPI Clock
  14          sbit MISO = P1 ^ 2;
  15          sbit CSN = P1 ^ 3;  // SPI Chip Select
  16          sbit MOSI = P1 ^ 4;
  17          sbit IRQ = P1 ^ 5;
  18          
  19          static u8 bdata status;
  20          sbit RX_DR = status ^ 6;   // receive interrupt
  21          sbit TX_DS = status ^ 5;   // transmit interrupt
  22          sbit MAX_RT = status ^ 4;  // retry overflow interrupt
  23          
  24          // Don't forget to call this function!!
  25          void NRF24L01_init() {
  26   1          delay_10ms();
  27   1          CE = 0;
  28   1          CSN = 1;
  29   1          SCLK = 0;
  30   1          IRQ = 1;
  31   1      }
  32          
  33          /*
  34           * Don't forget to set CSN when calling this function
  35           * It seems that NRF24L01 can only accept one command during one Chip Select
  36           */
  37          u8 SPI_RW(u8 c) {
  38   1          u8 i = 0;
  39   1          // CSN = 0;
  40   1          for (; i < 8; i++) {
  41   2              MOSI = c & 0x80;
  42   2              c <<= 1;
  43   2              SCLK = 1;
  44   2              c |= (MISO & 0x01);
  45   2              SCLK = 0;
  46   2          }
  47   1          // CSN = 1;
  48   1          return c;
  49   1      }
  50          
  51          // R_REGISTER : 000A AAAA
  52          u8 SPI_read_reg(u8 reg_addr) {
  53   1          u8 reg_data;
  54   1          CSN = 0;
C51 COMPILER V9.60.0.0   NRF24L01                                                          08/08/2020 18:31:22 PAGE 2   

  55   1          SPI_RW(reg_addr);
  56   1          reg_data = SPI_RW(NOP);
  57   1          CSN = 1;
  58   1          return reg_data;
  59   1      }
  60          
  61          /*
  62           * W_REGISTER : 001A AAAA
  63           * only call this function when NRF24L01 is not running
  64           */
  65          void SPI_write_reg(u8 reg_addr, u8 reg_data) {
  66   1          CSN = 0;
  67   1          SPI_RW(reg_addr | 0x20);
  68   1          SPI_RW(reg_data);
  69   1          CSN = 1;
  70   1      }
  71          
  72          void SPI_read_multi(u8 reg_addr, u8 *reg_data, u8 len) {
  73   1          CSN = 0;
  74   1          SPI_RW(reg_addr);
  75   1          for (; len > 0; len--) {
  76   2              *reg_data = SPI_RW(NOP);
  77   2              reg_data++;
  78   2          }
  79   1          CSN = 1;
  80   1      }
  81          
  82          // only call this function when NRF24L01 is not running
  83          void SPI_write_multi(u8 reg_addr, u8 *reg_data, u8 len) {
  84   1          CSN = 0;
  85   1          SPI_RW(reg_addr | 0x20);
  86   1          for (; len > 0; len--) {
  87   2              SPI_RW(*reg_data);
  88   2              reg_data++;
  89   2          }
  90   1          CSN = 1;
  91   1      }
  92          
  93          // the only function that will change CE, except for init
  94          void NRF24L01_running(bit ce) {
  95   1          CE = ce;
  96   1          delay_1ms();
  97   1      }
  98          
  99          /*
 100           * only call this function when NRF24L01 is not running
 101           *
 102           * using channel 0, addr length = 5, auto retry,
 103           * radio frequency channel = 0x40, 1Mbps, 0dBm
 104           */
 105          void NRF24L01_SetTxMode(u8 *TX_addr) {
 106   1          SPI_write_reg(CONFIG, 0x0e);  // CRC 16
 107   1          SPI_write_reg(EN_RXADDR, 0x01);
 108   1          SPI_write_reg(SETUP_RETR, 0x3a);
 109   1          SPI_write_reg(RF_CH, 0x40);
 110   1          SPI_write_reg(RF_SETUP, 0x07);
 111   1          SPI_write_multi(RX_ADDR_P0, TX_addr, 5);
 112   1          SPI_write_multi(TX_ADDR, TX_addr, 5);
 113   1          // SPI_write_reg(RX_PW_P0, 0x01);
 114   1      }
 115          
 116          // call NRF24L01_running(1) after this to start transmission
C51 COMPILER V9.60.0.0   NRF24L01                                                          08/08/2020 18:31:22 PAGE 3   

 117          void NRF24L01_transmit(u8 *TX_data, u8 TX_data_len) {
 118   1          SPI_write_multi(W_TX_PAYLOAD, TX_data, TX_data_len);
 119   1      }
 120          
 121          /*
 122           * only call this function when NRF24L01 is not running
 123           *
 124           * using channel 0, addr length = 5,
 125           * radio frequency channel = 0x40
 126           *
 127           * call NRF24L01_running(1) after this to start reception
 128           */
 129          void NRF24L01_SetRxMode(u8 *RX_addr, u8 TX_data_len) {
 130   1          SPI_write_reg(CONFIG, 0x0f);  // CRC 16
 131   1          SPI_write_reg(EN_AA, 0x01);
 132   1          SPI_write_reg(EN_RXADDR, 0x01);
 133   1          SPI_write_reg(RF_CH, 0x40);
 134   1          SPI_write_reg(RF_SETUP, 0x07);
 135   1          SPI_write_multi(RX_ADDR_P0, RX_addr, 5);
 136   1          SPI_write_reg(RX_PW_P0, TX_data_len);
 137   1      }
 138          
 139          /*
 140           * Blocking method
 141           * this function won't change CE
 142           */
 143          void NRF24L01_receive(u8 *RX_data, u8 RX_data_len) {
 144   1      retry:
 145   1          status = SPI_read_reg(STATUS);
 146   1          if (RX_DR) {
 147   2              bit temp = CE;
 148   2              CE = 0;
 149   2              SPI_read_multi(R_RX_PAYLOAD, RX_data, RX_data_len);
 150   2              SPI_write_reg(STATUS, 0x40);
 151   2              CE = temp;
 152   2              return;
 153   2          } else {
 154   2              goto retry;
 155   2          }
 156   1      }
 157          
 158          /**
 159           * if transmit successful, return 1
 160           * if all attempt failed, return 2
 161           * else return 0
 162           */
 163          u8 NRF24L01_checkACK() {
 164   1          status = SPI_read_reg(STATUS);
 165   1          if (MAX_RT) {
 166   2              bit temp = CE;
 167   2              CE = 0;
 168   2              SPI_write_reg(STATUS, 0x10);
 169   2              CSN = 0;
 170   2              SPI_RW(FLUSH_TX);
 171   2              CSN = 1;
 172   2              CE = temp;
 173   2              return 2;
 174   2          }
 175   1          if (TX_DS) {
 176   2              bit temp = CE;
 177   2              CE = 0;
 178   2              SPI_write_reg(STATUS, 0x20);
C51 COMPILER V9.60.0.0   NRF24L01                                                          08/08/2020 18:31:22 PAGE 4   

 179   2              CSN = 0;
 180   2              SPI_RW(FLUSH_TX);
 181   2              CSN = 1;
 182   2              CE = temp;
 183   2              return 1;
 184   2          }
 185   1          return 0;
 186   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    375    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
